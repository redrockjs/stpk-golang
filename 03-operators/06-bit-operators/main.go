package main

import "fmt"

const (
	execute = 0b001 // 1 - право выполнения
	write   = 0b010 // 2 - право записи
	read    = 0b100 // 4 - право чтения
)

func main() {
	a := 5 // 101
	b := 3 // 011

	// если используем битовые операторы то желательно оставлять комментарий к коду, с описанием что происходит.
	fmt.Println("a & b: ", a&b)   // вставляем 1 только там, где у первого числа и у второго будет 1, 101&011 = 1 (1)
	fmt.Println("a | b: ", a|b)   // если хотябы у кого то будет 1 то будет 1, 101|011 = 7 (111)
	fmt.Println("a ^ b: ", a^b)   // если одинаковые значения то будет 0, иначе 1 101:011 = 6 (110)
	fmt.Println("^a: ", ^a)       // переворачивает единицы на нули, а нули на единицы ^101 = -6 (-110)
	fmt.Println("a &^ b: ", a&^b) // если в первом значении была 1, а во втором 0 тогда получаем 1 во всех остальных случаях получаем 0, 101 &^ 011 = 4 (100)
	fmt.Println("a << 1: ", a<<1) // справа к этому числу добавим 0, 101<<1 = 10 (1010)
	fmt.Println("a >> 1: ", a>>1) // убираем от числа справа одно число, 101>>1 = 2 (10)

	// -------------Пример использования с правами доступа----------------
	fmt.Println("-------------------------------------------")
	executeRead := execute | read

	fmt.Printf("execute (001) | read (100): число %d, бинарно %b\n", executeRead, executeRead)

	writeRead := write | read // 110
	fmt.Printf("write (010) | read (100): число %d, бинарно %b\n", writeRead, writeRead)

	// -------------Пример обратного получения значений--------------
	fmt.Println("-------------------------------------------")
	permissions := 5
	fmt.Printf("Наши права: %b\n", permissions)                  // 101
	fmt.Printf("Можем выполнять: %t\n", permissions&execute > 0) // 010
	fmt.Printf("Можем записывать: %t\n", permissions&write > 0)  // 000
	fmt.Printf("Можем читать: %t\n", permissions&read > 0)       // 100

	fmt.Println("-------------------------------------------")
	fmt.Printf("%d\n", 5<<2)
	fmt.Printf("%d\n", 5>>1)
	fmt.Printf("%d\n", 5&3)
	fmt.Printf("%d\n", 5|2)
	fmt.Printf("%d\n", 5|2)
	fmt.Printf("%d\n", ^5)
}
